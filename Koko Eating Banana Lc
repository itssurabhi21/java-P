/*
Koko eating banana
Leetcode - https://leetcode.com/problems/koko-eating-bananas/
*/

//Brute force
class Solution {
    public int totalhr(int arr[],int h)
    {
        int ans = 0;
        for(int i=0;i<arr.length;i++)
        {
            ans = ans + (int)Math.ceil((double)arr[i]/(double)h);
        }
        return ans;
    }

    public int max(int arr[])
    {
        int ans = arr[0];
        for(int i=1;i<arr.length;i++)
        {
            ans= Math.max(ans,arr[i]);
        }
        return ans;
    }

    public int minEatingSpeed(int[] piles, int h) 
    {
        
        int max = max(piles);
        int i=1;
        for(i=1;i<=max;i++)
        {
            int hrs = totalhr(piles,i);
            if(hrs<=h) 
            {
                break;
            }
        }
        return i;
    }
}





//optimal-modified binary search

class Solution {
    public long totalhr(int arr[],int h)
    {
        long ans = 0;
        for(int i=0;i<arr.length;i++)
        {
            ans = ans + (long)Math.ceil((double)arr[i]/(double)h);
        }
        return ans;
    }

    public int max(int arr[])
    {
        int ans = arr[0];
        for(int i=1;i<arr.length;i++)
        {
            ans= Math.max(ans,arr[i]);
        }
        return ans;
    }

    public int minEatingSpeed(int[] piles, int h) 
    {
        int max = max(piles);
        int low =1,high = max;
        int ans = max;
        while(low<=high)
        {
            int mid = low + (high-low)/2;
            long totHr = totalhr(piles,mid);
            if(totHr<= h)
            {
                high = mid-1;
                ans = mid;
            }
            else
            {
                low = mid+1;
            }
        }
        return ans;
    }
}
// take long while calculating total hour and in ceil value calculation.
