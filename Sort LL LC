//Sort LL LC
//https://leetcode.com/problems/sort-list/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mid1(ListNode head)
    {
        ListNode slow = head,fast = head.next;
        while(fast!=null && fast.next!= null)
        {
            slow= slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    public ListNode sortList(ListNode head) 
    {
        if(head==null || head.next == null) return head;
        ListNode mid = mid1(head);
        ListNode nextMid = mid.next;
        mid.next = null;
        ListNode LP = sortList(head);
        ListNode RP =  sortList(nextMid);
        return merge(LP,RP);


    }

    public ListNode mid(ListNode head)
    {
        ListNode slow = head, fast = head.next;
        while(fast!= null && fast.next!=null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

    public ListNode merge(ListNode head,ListNode nextMid)
    {
        ListNode newLL = new ListNode(-1);
        ListNode temp = newLL;
        ListNode left = head,right = nextMid;
         while(left!=null && right!=null)
         {
            if(left.val <=right.val)
            {
                temp.next = new ListNode(left.val);
                temp =temp.next;
                left = left.next;
            }
            else
            {
                temp.next = new ListNode(right.val);
                temp =temp.next;
                right = right.next;
            }
         }
         while(left!=null)
         {
            temp.next = new ListNode(left.val);
            temp =temp.next;
            left = left.next;
         }  

         while(right!=null)
         {
            temp.next = new ListNode(right.val);
            temp =temp.next;
            right = right.next;
         } 

         return newLL.next;


    }

    
}
