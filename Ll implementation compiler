//Linked List self practice; online compiler

public class LinkedList
{
    public static class Node
    {
        int data;
        Node next;
        
        public Node(int data)
        {
            this.data = data;
            this.next = null;
        }
        
    }
    
    public static Node head;
    public static Node tail;
    public static int size;
    
    public void addFirst(int data)
    {
        //Tc - 0(1)
        //step 1 create new node 
        Node newNode = new Node(data);
        size++;
        if(head == null)
        {
            head = tail = newNode;
            return;
        }
        
        //connect new node to head 
        newNode.next = head;
        
        //reassign head to new node
        head = newNode;
    }
    
    public void addLast(int data)
    {
        //Tc - 0(1)
        //step 1 create new node 
        Node newNode = new Node(data);
        size++;
        if(head == null)
        {
            head = tail = newNode;
            return;
        }
        
        //connect new node to head 
        tail.next = newNode;
        
        //reassign head to new node
        tail = newNode;
    }
    
    public void addIndex(int idx,int data)
    {
        if(idx == 0)
        {
            addFirst(data);
            return;
        }
        
        Node newNode = new Node(data);
        size++;
        Node temp = head;
        int i =0;
        while(i<idx-1)
        {
           temp = temp.next;
           i++;
        }
        
        newNode.next = temp.next;
        temp.next = newNode;
    }
    
    public int removeFirst()
    {
        if(size == 0) return Integer.MAX_VALUE;
        else if(size==1)
        {
            int val = head.data;
            head = tail = null;
            size=0;
            return val;
        }
        int val = head.data;
        head = head.next;
        size--;
        return val;
    }
    
    public int removeLast()
    {
        if(size == 0) return Integer.MAX_VALUE;
        else if(size==1)
        {
            int val = head.data;
            head = tail = null;
            size=0;
            return val;
        }
        
        Node prev = head;
        for(int i=0;i<size-2;i++)
        {
           prev = prev.next; 
        }
        int val = tail.data;
        prev.next = null;
        tail= prev;
        size--;
        return val;
    }
    
    public int searchIt(int key)
    {
        if(size == 0) return -1;
        int idx=0;
        Node temp = head;
        while(temp!=null)
        {
            if(temp.data == key) return idx+1;
            temp = temp.next;
            idx++;
        }
        return -1;
    }
    
    public int searchRec(Node head,int key,int pos)
    {
        if(head == null) return -1;
        else if(head.data == key) return pos;
    
        return  searchRec(head.next,key,pos+1);
    
    }
    
    public int searchRec1(int key)
    {
        return helper(head,key);
    }
    
    public int helper(Node head, int key)
    {
        if(head == null) return -1;
        
        if(head.data == key)
        {
            return 1;
        }
        
        int idx = helper(head.next , key);
        if(idx == -1)
        {
            return -1;
        }
        
            return idx+1;
        
    }
    
    public void reverseLL()
    {
        Node prev = null;
        Node curr = tail = head;
        Node next;
        while(curr!=null)
        {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        
        head = prev;
        
    }
    
    public void deleteFromEnd(int n)
    {
        int sz = 0;
        Node temp = head;
        while(temp!=null)
        {
            sz++;
            temp = temp.next;
            
        }
        if(n==sz) //delete head
        {
            head = head.next;
            return;
        }
        
        //sz -n
        int i =1;
        int itf = sz - n;
        Node prev = head;
        while(i<itf)
        {
            prev = prev.next;
            i++;
        }
        
        prev.next = prev.next.next;return;
    }
    
    public Node findMid(Node head)
    {
        Node slow=head,fast =head;
        while(fast!=null && fast.next!=null)
        {
            slow=slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    
    public boolean checkPalindrome()
    {
        if(head == null || head.next == null) return true;
        //mid findMid
        Node mid = findMid(head);
        
        //reverse 2nd half
        Node curr=mid,next=mid ,prev = null;
        while(curr!=null)
        {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr=next;
        }
        
        Node right = prev;
        Node left = head;
        //check
        
        while(right!=null)
        {
            if(left.data !=right.data) return false;
            left = left.next;
            right = right.next;
        }
        
        return true;
    }
    
    
    public void printLL(Node head)
    {
        if(head==null) 
        {
            System.out.println("Empty node list");
            return;
        }
        
        Node temp = head;
        while(temp!=null)
        {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.print("null");
        System.out.println();
    }
	public static void main(String[] args) 
	{
	   
	    LinkedList ll = new LinkedList();
	   // ll.printLL(head);
	   // ll.addFirst(2);
	   // ll.printLL(head);
	   // ll.addFirst(1);
	   // ll.printLL(head);
	   // ll.addLast(3);
	   // ll.printLL(head);
	   // ll.addLast(4);
	   // ll.printLL(head);
	   // System.out.println(head.data + " ");
	   // System.out.println(tail.data + " ");
	   // ll.addIndex(4,33);
	   // ll.printLL(head);
	   // System.out.println(size + " ");
	   //ll.addFirst(6);
	   ll.addFirst(5);
	   ll.addFirst(4);
	   ll.addFirst(2);
	   ll.addFirst(3);
	   ll.addFirst(4);
	   ll.addFirst(5);
	   ll.printLL(head);
	   //ll.removeFirst();
	   //ll.printLL(head);
	   //ll.removeFirst();
	   //ll.printLL(head);
	   //ll.removeLast();
	   //ll.printLL(head);
	   System.out.println("SIZE:-" + size);
	   System.out.println(ll.searchIt(4));
	    System.out.println(ll.searchRec1(4));
	    ll.reverseLL();
	    ll.printLL(head);
	    //.deleteFromEnd(2);
	    ll.printLL(head);
	    System.out.println(ll.findMid(head).data);
	    System.out.println(ll.checkPalindrome());
		
	}
}
