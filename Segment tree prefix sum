import java.util.*;

public class Main
{
    public static void buildtree(int arr[],int i,int si,int sj,int st[])
    {
        //leaf node
        if(si==sj) 
        {
            st[i] = arr[si];
            return;
        }
        
        
        int mid = (si+sj)/2;
        buildtree(arr,2*i+1,si,mid,st);
        buildtree(arr,2*i+2,mid+1,sj,st);
        st[i] = st[2*i+1] + st[2*i+2];
    }
    
    public static int query(int st[],int i,int si,int sj,int qi,int qj)
    {
        if(qj<si || qi>sj) return 0;//overlap case
        
        //complete overlap
        if(si>=qi && sj<=qj) return st[i];
        
        //partial overlap check both side
        int mid = (si+sj)/2;
        
        return query(st,2*i+1,si,mid,qi,qj) + query(st,2*i+2,mid+1,sj,qi,qj); 
            
    }
    
    public static void printtree(int arr[])
    {
        for(int i : arr)
        {
            System.out.print(i + " ");
        }
        System.out.println();
    }
    public static void update(int arr[],int target,int newVal,int st[])
    {
        int old = arr[target];
        arr[target] = newVal;
        int diff = newVal - old;
        updateutil(st,target,0,0,arr.length-1,diff);
    }
    
    public static void updateutil(int st[],int target, int i,int si,int sj,int diff)
    {
        if(target > sj || target<si) return;
        
        st[i] = st[i]+diff;
        if(si==sj) 
        {
            //if leaf node restrict recursion for overflow condition
            return;
        }
        
        int mid = (si+sj)/2;
        //update left and right for partial overlap
        
        updateutil(st,target,2*i+1,si,mid,diff);
        
        updateutil(st,target,2*i+2,mid+1,sj,diff);
    }
    
	public static void main(String[] args) 
	{
	    
		int arr[] ={1,2,3,4,5,6,7,8};
		int n = arr.length;
		int st[] = new int[4*n];
		buildtree(arr,0,0,n-1,st);
		printtree(arr);
		printtree(st);
		System.out.println(query(st,0,0,7,0,2) + "\n" );
		update(arr,6,10,st);
		printtree(st);
		
	}
}




//output
/*
1 2 3 4 5 6 7 8 
36 10 26 3 7 11 15 1 2 3 4 5 6 7 8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
6

39 10 29 3 7 11 18 1 2 3 4 5 6 10 8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
*/
