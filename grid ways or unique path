https://leetcode.com/problems/unique-paths/

//brute force
class Solution {
    public int uniquePaths(int m, int n) 
    {
        return ans(0,0,m,n);
    }
     public int ans(int row,int col,int m,int n)
     {
        
        if(row == m-1 && col == n-1) return 1;
        else if(row>=m || col>=n) return 0;
        int w1 = ans(row,col+1,m,n); //right
        int w2 = ans(row+1,col,m,n); //down
        return w1+w2;
     }
}


//optimal
class Solution {
    public int uniquePaths(int m, int n) 
    {
        int arr[][] = new int [m][n];
        for(int i=n-1;i>=0;i--)
        {
            arr[m-1][i] =1;
        } 
        for(int i=m-1;i>=0;i--)
        {
            arr[i][n-1] =1;
        }
        for(int i =m-2;i>=0;i--)
        {
            for(int j=n-2;j>=0;j--)
            {
                arr[i][j] = arr[i][j+1] + arr[i+1][j];
            }
        } 
        return arr[0][0];  
     }
    
    
}
